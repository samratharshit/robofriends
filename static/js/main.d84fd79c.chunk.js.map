{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","toLocaleLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"0NAsBeA,EAnBF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAGxB,OAGI,cAFA,CAEA,OAAKC,UAAW,sDAAhB,UACI,qBAAKC,IAAM,QAAQC,IAAG,+BAA2BH,EAA3B,cACtB,gCACI,6BAAKF,IACL,4BAAIC,WCgBLK,EAxBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAUf,OACA,8BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OAAQ,cAAC,EAAD,CAAgBR,GAAMK,EAAOG,GAAGR,GAAIF,KAAQO,EAAOG,GAAGV,KAAOC,MAASM,EAAOG,GAAGT,OAAnES,SCDdC,EAhBG,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aAEhB,OACI,qBAAKT,UAAU,OAAf,SACA,uBACAA,UAAY,mCACZU,KAAO,SACPC,YAAY,gBACZC,SAAYH,OCYLI,EAZD,SAACC,GACP,OAGI,aAFA,CAEA,OAAKC,MAAS,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAAxE,SACKJ,EAAMK,YCURC,G,wDAtBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAQ,CACTC,UAAW,GAHD,E,qDAOlB,SAAkBC,EAAMC,GAEpBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAG7B,WACI,OAAGG,KAAKJ,MAAMC,SAEV,2DAGGG,KAAKX,MAAMK,a,GAnBEQ,cCuEbC,E,kDA5DX,aAAc,IAAD,8BACT,gBA0BJC,eAAiB,SAACC,GAGd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SA5BzC,EAAKZ,MAAQ,CACTjB,OAAQ,GACR2B,YAAa,IAEnBG,QAAQC,IAAI,eAND,E,qDASb,WAAoB,IAAD,OAIfC,MAAM,8CACLC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF,EAAKd,SAAS,CAACtB,OAAQoC,OAI3BN,QAAQC,IAAI,uB,oBAehB,WAAS,IAAD,OACJD,QAAQC,IAAI,UACZ,IAAMM,EAAiBhB,KAAKJ,MAAMjB,OAAOsC,QAAO,SAAAC,GAE5C,OAAOA,EAAM9C,KAAK+C,oBAAoBC,SAAS,EAAKxB,MAAMU,YAAYa,wBAE1E,OACI,sBAAK5C,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAAegB,KAAKI,iBAC/B,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAUzB,OAAUqC,e,GAlDtBd,aCAHmB,G,YAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCKdO,IAASC,OACL,8BACK,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM7BX,M","file":"static/js/main.d84fd79c.chunk.js","sourcesContent":["import React from \"react\";  //we need to import react even if we dont use react components hat is only js is written bcoz its not js , its JSX provided by React\r\n\r\n\r\nconst Card = ({name, email, id}) => {\r\n    // we can also use props in place of {name,email,id} and then do props.name etc.\r\n  \r\n    return(\r\n        //in return, we just need to return one thing\r\n\r\n        <div className= 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt = \"robot\" src ={`https://robohash.org/${id}?200*200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Card;","import Card from './Card.js';\r\nimport React from 'react';\r\n//robots file usesw export instead of export default so it can export many things so we use brackets to call\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n    //first parameter of map is the element of the array itself and second arguement is index\r\n    //map is used for looping  robots is an array of objects\r\n    //remember to use key prop whenever looping so react could manage easily if some components deleted\r\n \r\n   \r\n    //we are using curly braces to provide id and name ,etc. as js syntax\r\n    // these are being sent to the card function /object that we had created in other file\r\n\r\n    \r\n    return (\r\n    <div>\r\n        {\r\n        robots.map((user, i) => {\r\n        return (<Card key = {i} id = {robots[i].id} name = {robots[i].name } email = {robots[i].email} />\r\n        ); \r\n    })\r\n\r\n        }\r\n    </div>\r\n    );\r\n\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange})=>{\r\n    \r\n    return(\r\n        <div className='pa2 '>\r\n        <input \r\n        className = 'pa3 ba b--green bg-lightest-blue'\r\n        type = 'search' \r\n        placeholder='Search Robots' \r\n        onChange = {searchChange}\r\n        />\r\n        </div>\r\n        //yahan par jab searchbox me hum kuch likhenge to vo sab parent component me app ko bheja jayega onChange bolega ki parent ke \r\n        //searchCHange fxn ko call rko\r\n    )\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\n\r\n//scroll is not a self closing component as we have to return whatever is between the 2 scroll tags.\r\n// state , props we have discussed now one more thing is there called children\r\n//scroll can use children to render ch ildren --- every props object has children\r\n//even if we dont pass props to scroll tag from app.js but still we will get props object having a children property by default\r\n//as every component in react has this property\r\n\r\n\r\nconst Scroll =(props)=>{\r\n        return (\r\n            //here we are doing jsx similar to css way but little bit difference - , in place of ; and camelcase\r\n            //overflow-y is used in css for scrolling \r\n            <div style = {{ overflowY: 'scroll', border: '5px solid black', height: '800px' }}> \r\n                {props.children}\r\n            </div>\r\n        \r\n            )\r\n        \r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n    \r\n    componentDidCatch(error,info){ //this is a lifecycle hook \r\n        // it is just like try catch in js.\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n        return (\r\n            <h1>Oops... That is not good.</h1>\r\n        )\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\n//state of the app simply means description of the app. it is an object that describes our app.\r\n// child recieves state from parents and cant change it}\r\n\r\n//App is a smart component as it has state\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super(); //calls the constructor of component\r\n        this.state = { //the state lives in the parent component that is App and it(App) can pass the state to different child components\r\n            robots: [],\r\n            searchfield: ''\r\n        } // now this state can be used by any child composnent like cardlist - cardlist componnet recieves it as props although it is a state\r\n      console.log('constructor');\r\n    }\r\n\r\n    componentDidMount(){\r\n        //this tells whether the component has been rendered or not?\r\n        //it is called after render..(\r\n            //fetch is a fxn. of the window object\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response =>{ //here .then catches the response and converts to json\r\n            return response.json();\r\n        })\r\n        .then(users=>{\r\n            this.setState({robots: users});\r\n        })\r\n        ;\r\n    \r\n        console.log('componentDidMount');\r\n        //here, we are changing the state and everytime the state changes, render runs again.\r\n    }\r\n\r\n\r\n    onSearchChange = (event) => { //using arrow fxns. avoids one error here. that is here this will now refer to App rather than referring to SearchBox(bcoz this fxn is called from there)\r\n       \r\n        //event.target.value remeber this. issey pta chalega kya type kia hai event ke target object ke value key me\r\n        this.setState({searchfield: event.target.value}); //we  are using set state rather direct assignment\r\n        \r\n    \r\n    \r\n    }\r\n    //we call it using this as it is an object\r\n\r\n    render(){\r\n        console.log('render')\r\n        const filteredRobots = this.state.robots.filter(robot =>{\r\n            //here we need to give a condition to filter\r\n            return robot.name.toLocaleLowerCase().includes(this.state.searchfield.toLocaleLowerCase());\r\n        })\r\n        return(\r\n            <div className='tc'>\r\n                <h1 className='f2'>RoboFriends</h1>\r\n                <SearchBox searchChange= {this.onSearchChange}/>\r\n                <Scroll>\r\n                  <ErrorBoundary>\r\n                    <CardList robots = {filteredRobots}/>\r\n                  </ErrorBoundary>\r\n                </Scroll>\r\n                \r\n            </div>\r\n            //in classlist, we are using state given by App() component\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App.js'\nimport './index.css';\n\n\n\n //we use curly to import bcoz the file has export only but not export default\nimport 'tachyons';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <div>\n         <App />\n    </div>\n   , document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}